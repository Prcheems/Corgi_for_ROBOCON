<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Lucky\Lucky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Lucky\Lucky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Fri Dec 27 14:34:09 2024
<BR><P>
<H3>Maximum Stack Usage =        328 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIM17_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; usart_reset &rArr; MX_UART8_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e4]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[ab]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ab]">ADC3_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[ab]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[ad]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[ae]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[af]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b0]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b1]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b2]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b3]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b4]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">BusFault_Handler</a> from stm32h7xx_it.o(i.BusFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b5]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[bb]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9c]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9d]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9e]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9f]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream0_IRQHandler</a> from stm32h7xx_it.o(i.DMA1_Stream0_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">DMA1_Stream1_IRQHandler</a> from stm32h7xx_it.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream2_IRQHandler</a> from stm32h7xx_it.o(i.DMA1_Stream2_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">DMA1_Stream3_IRQHandler</a> from stm32h7xx_it.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">DMA1_Stream4_IRQHandler</a> from stm32h7xx_it.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">DMA1_Stream5_IRQHandler</a> from stm32h7xx_it.o(i.DMA1_Stream5_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">DMA1_Stream6_IRQHandler</a> from stm32h7xx_it.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">DMA1_Stream7_IRQHandler</a> from stm32h7xx_it.o(i.DMA1_Stream7_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream0_IRQHandler</a> from stm32h7xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream1_IRQHandler</a> from stm32h7xx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">DMA2_Stream2_IRQHandler</a> from stm32h7xx_it.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[ac]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[31]">DebugMon_Handler</a> from stm32h7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[bc]">ECC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[71]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[ca]">Gamepad_Ctl</a> from freertos.o(i.Gamepad_Ctl) referenced from freertos.o(.constdata)
 <LI><a href="#[9b]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[95]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[96]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[97]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[98]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[99]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9a]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[aa]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">HardFault_Handler</a> from stm32h7xx_it.o(i.HardFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">I2C1_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">I2C1_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a7]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b6]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b7]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b8]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b9]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[ba]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">LTDC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a6]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a5]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a8]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">MemManage_Handler</a> from stm32h7xx_it.o(i.MemManage_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">NMI_Handler</a> from stm32h7xx_it.o(i.NMI_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">OTG_FS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">QUADSPI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[85]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a0]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[bd]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">SDMMC1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a9]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">SPI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[83]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a1]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[c9]">Spd_Race_Ctl</a> from freertos.o(i.Spd_Race_Ctl) referenced from freertos.o(.constdata)
 <LI><a href="#[33]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[bf]">SystemInit</a> from system_stm32h7xx.o(i.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[36]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a2]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a3]">TIM16_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a4]">TIM17_IRQHandler</a> from stm32h7xx_it.o(i.TIM17_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">TIM1_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">TIM2_IRQHandler</a> from stm32h7xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">TIM3_IRQHandler</a> from stm32h7xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">TIM4_IRQHandler</a> from stm32h7xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[65]">TIM5_IRQHandler</a> from stm32h7xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">UART4_IRQHandler</a> from stm32h7xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">UART5_IRQHandler</a> from stm32h7xx_it.o(i.UART5_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">UART7_IRQHandler</a> from stm32h7xx_it.o(i.UART7_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[81]">UART8_IRQHandler</a> from stm32h7xx_it.o(i.UART8_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[c1]">UART_DMAAbortOnError</a> from stm32h7xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[c4]">UART_DMAError</a> from stm32h7xx_hal_uart.o(i.UART_DMAError) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[c4]">UART_DMAError</a> from stm32h7xx_hal_uart.o(i.UART_DMAError) referenced from stm32h7xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[c5]">UART_DMAReceiveCplt</a> from stm32h7xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32h7xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[c6]">UART_DMARxHalfCplt</a> from stm32h7xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32h7xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[c2]">UART_DMATransmitCplt</a> from stm32h7xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[c3]">UART_DMATxHalfCplt</a> from stm32h7xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[59]">USART1_IRQHandler</a> from stm32h7xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">USART2_IRQHandler</a> from stm32h7xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">USART3_IRQHandler</a> from stm32h7xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">USART6_IRQHandler</a> from stm32h7xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2f]">UsageFault_Handler</a> from stm32h7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[be]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[cc]">__main</a> from __main.o(!!!main) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[15]">backflip_enter</a> from backflip.o(i.backflip_enter) referenced 2 times from fsm.o(.data)
 <LI><a href="#[17]">backflip_exit</a> from backflip.o(i.backflip_exit) referenced 2 times from fsm.o(.data)
 <LI><a href="#[16]">backflip_run</a> from backflip.o(i.backflip_run) referenced 2 times from fsm.o(.data)
 <LI><a href="#[18]">crossleg_enter</a> from action.o(i.crossleg_enter) referenced 2 times from fsm.o(.data)
 <LI><a href="#[1a]">crossleg_exit</a> from fsm.o(i.crossleg_exit) referenced 2 times from fsm.o(.data)
 <LI><a href="#[19]">crossleg_run</a> from action.o(i.crossleg_run) referenced 2 times from fsm.o(.data)
 <LI><a href="#[cb]">debug_fun</a> from freertos.o(i.debug_fun) referenced from freertos.o(.constdata)
 <LI><a href="#[12]">jump_enter</a> from jump.o(i.jump_enter) referenced 2 times from fsm.o(.data)
 <LI><a href="#[14]">jump_exit</a> from fsm.o(i.jump_exit) referenced 2 times from fsm.o(.data)
 <LI><a href="#[1e]">jump_hurdles_enter</a> from fsm.o(i.jump_hurdles_enter) referenced 2 times from fsm.o(.data)
 <LI><a href="#[20]">jump_hurdles_exit</a> from fsm.o(i.jump_hurdles_exit) referenced 2 times from fsm.o(.data)
 <LI><a href="#[1f]">jump_hurdles_run</a> from fsm.o(i.jump_hurdles_run) referenced 2 times from fsm.o(.data)
 <LI><a href="#[13]">jump_run</a> from jump.o(i.jump_run) referenced 2 times from fsm.o(.data)
 <LI><a href="#[6]">keep_enter</a> from action.o(i.keep_enter) referenced 2 times from fsm.o(.data)
 <LI><a href="#[8]">keep_exit</a> from fsm.o(i.keep_exit) referenced 2 times from fsm.o(.data)
 <LI><a href="#[7]">keep_run</a> from action.o(i.keep_run) referenced 2 times from fsm.o(.data)
 <LI><a href="#[1b]">line_enter</a> from fsm.o(i.line_enter) referenced 2 times from fsm.o(.data)
 <LI><a href="#[1d]">line_exit</a> from fsm.o(i.line_exit) referenced 2 times from fsm.o(.data)
 <LI><a href="#[1c]">line_run</a> from fsm.o(i.line_run) referenced 2 times from fsm.o(.data)
 <LI><a href="#[c8]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[c7]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[9]">squat_enter</a> from action.o(i.squat_enter) referenced 2 times from fsm.o(.data)
 <LI><a href="#[b]">squat_exit</a> from fsm.o(i.squat_exit) referenced 2 times from fsm.o(.data)
 <LI><a href="#[a]">squat_run</a> from action.o(i.squat_run) referenced 2 times from fsm.o(.data)
 <LI><a href="#[c]">stand_enter</a> from action.o(i.stand_enter) referenced 2 times from fsm.o(.data)
 <LI><a href="#[e]">stand_exit</a> from action.o(i.stand_exit) referenced 2 times from fsm.o(.data)
 <LI><a href="#[d]">stand_run</a> from action.o(i.stand_run) referenced 2 times from fsm.o(.data)
 <LI><a href="#[3]">start_enter</a> from action.o(i.start_enter) referenced 2 times from fsm.o(.data)
 <LI><a href="#[5]">start_exit</a> from action.o(i.start_exit) referenced 2 times from fsm.o(.data)
 <LI><a href="#[4]">start_run</a> from action.o(i.start_run) referenced 2 times from fsm.o(.data)
 <LI><a href="#[21]">test1_enter</a> from fsm.o(i.test1_enter) referenced 2 times from fsm.o(.data)
 <LI><a href="#[23]">test1_exit</a> from fsm.o(i.test1_exit) referenced 2 times from fsm.o(.data)
 <LI><a href="#[22]">test1_run</a> from fsm.o(i.test1_run) referenced 2 times from fsm.o(.data)
 <LI><a href="#[24]">test2_enter</a> from fsm.o(i.test2_enter) referenced 2 times from fsm.o(.data)
 <LI><a href="#[26]">test2_exit</a> from fsm.o(i.test2_exit) referenced 2 times from fsm.o(.data)
 <LI><a href="#[25]">test2_run</a> from fsm.o(i.test2_run) referenced 2 times from fsm.o(.data)
 <LI><a href="#[27]">test3_enter</a> from fsm.o(i.test3_enter) referenced 2 times from fsm.o(.data)
 <LI><a href="#[29]">test3_exit</a> from fsm.o(i.test3_exit) referenced 2 times from fsm.o(.data)
 <LI><a href="#[28]">test3_run</a> from fsm.o(i.test3_run) referenced 2 times from fsm.o(.data)
 <LI><a href="#[f]">walk_enter</a> from walk.o(i.walk_enter) referenced 2 times from fsm.o(.data)
 <LI><a href="#[11]">walk_exit</a> from walk.o(i.walk_exit) referenced 2 times from fsm.o(.data)
 <LI><a href="#[10]">walk_run</a> from walk.o(i.walk_run) referenced 2 times from fsm.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[cc]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[cd]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[cf]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1ee]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ef]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1f0]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[1f1]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[1f2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[d5]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[d0]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1fc]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1fe]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1ff]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[200]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[201]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[202]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[203]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[204]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[205]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[206]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[da]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[207]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[208]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[209]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[20a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[20b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[20c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[20d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[ce]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[20e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[d2]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d4]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[20f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[d6]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[210]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[e5]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d9]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[211]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[db]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[30]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1eb]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1ea]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[32]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[212]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[2a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[213]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_data_process
</UL>

<P><STRONG><a name="[de]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[214]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[215]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_All_Leg
</UL>

<P><STRONG><a name="[218]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[e2]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[21e]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[221]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[d8]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[dc]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[222]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>A1_All_Send</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, my_uart.o(i.A1_All_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = A1_All_Send &rArr; A1_Motor_Send_Data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A1_Motor_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[e7]"></a>A1_Motor_Send_Data</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, a1_motor.o(i.A1_Motor_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = A1_Motor_Send_Data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A1_All_Send
</UL>

<P><STRONG><a name="[17d]"></a>Abs_Diff_Judge</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, action.o(i.Abs_Diff_Judge))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Keep_State
</UL>

<P><STRONG><a name="[ea]"></a>Backflip_s</STRONG> (Thumb, 4780 bytes, Stack size 104 bytes, backflip.o(i.Backflip_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Backflip_s &rArr; Bezier &rArr; VMC_Jacobi_Matrix &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_One_Leg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Single_Pitch_State
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backflip_run
</UL>

<P><STRONG><a name="[ef]"></a>Bezier</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, dog.o(i.Bezier))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Bezier &rArr; VMC_Jacobi_Matrix &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMC_Jacobi_Matrix
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Target_Torque
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PD_Control
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Generator
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frontflip_s
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backflip_s
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gait
</UL>

<P><STRONG><a name="[f3]"></a>Bezier_Generator</STRONG> (Thumb, 458 bytes, Stack size 76 bytes, dog.o(i.Bezier_Generator))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Bezier_Generator
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Trans_Inv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Stance_Pos
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Pos
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Stance
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier
</UL>

<P><STRONG><a name="[fa]"></a>Bezier_Pos</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, pos_ctrl.o(i.Bezier_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Bezier_Pos &rArr; Foot_Convert_To_Motor &rArr; Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Target_Pos
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foot_Convert_To_Motor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Generator
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gait_posctrl
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stand_Up
</UL>

<P><STRONG><a name="[fd]"></a>Bezier_Stance</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, dog.o(i.Bezier_Stance))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Bezier_Stance &rArr; VMC_Jacobi_Matrix &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMC_Jacobi_Matrix
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Target_Torque
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PD_Control
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Generator
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gait
</UL>

<P><STRONG><a name="[fe]"></a>Bezier_Stance_Pos</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, pos_ctrl.o(i.Bezier_Stance_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Bezier_Stance_Pos &rArr; Foot_Convert_To_Motor &rArr; Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Target_Pos
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foot_Convert_To_Motor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Generator
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gait_posctrl
</UL>

<P><STRONG><a name="[f8]"></a>Bezier_Trans</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, dog.o(i.Bezier_Trans))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Generator
</UL>

<P><STRONG><a name="[f9]"></a>Bezier_Trans_Inv</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, dog.o(i.Bezier_Trans_Inv))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Generator
</UL>

<P><STRONG><a name="[ff]"></a>Bluetooth_Recv_Data_Process</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, bluetooth.o(i.Bluetooth_Recv_Data_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Bluetooth_Recv_Data_Process &rArr; Char_to_Short
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char_to_Short
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char_to_Int
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char_to_Float
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Restart_IT
</UL>

<P><STRONG><a name="[103]"></a>Bluetooth_Recv_Start</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, bluetooth.o(i.Bluetooth_Recv_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Bluetooth_Recv_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_start_recv
</UL>

<P><STRONG><a name="[105]"></a>Bluetooth_Restart_IT</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, bluetooth.o(i.Bluetooth_Restart_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Bluetooth_Restart_IT &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Recv_Data_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[2e]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>CPU_TS_TmrRd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, delay_dwt.o(i.CPU_TS_TmrRd))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Time_Points
</UL>

<P><STRONG><a name="[114]"></a>ChangeDogState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsm.o(i.ChangeDogState))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_race
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GamePad_Control_Obs
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fun
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spd_Race_Ctl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stage_Judge
</UL>

<P><STRONG><a name="[1c1]"></a>ChangeJumpType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jump.o(i.ChangeJumpType))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_enter
</UL>

<P><STRONG><a name="[112]"></a>Change_Ctrl_State</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pos_ctrl.o(i.Change_Ctrl_State))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_race
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GamePad_Control_Obs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spd_Race_Ctl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_run
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backflip_run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stand_enter
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squat_run
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crossleg_enter
</UL>

<P><STRONG><a name="[113]"></a>Change_Dog_Pitch_State</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dog.o(i.Change_Dog_Pitch_State))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GamePad_Control_Obs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spd_Race_Ctl
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_enter
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backflip_enter
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stand_enter
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squat_enter
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_enter
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crossleg_enter
</UL>

<P><STRONG><a name="[ee]"></a>Change_Single_Pitch_State</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dog.o(i.Change_Single_Pitch_State))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frontflip_s
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backflip_s
</UL>

<P><STRONG><a name="[102]"></a>Char_to_Float</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bluetooth.o(i.Char_to_Float))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Char_to_Float
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Recv_Data_Process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Recv_Data_Process
</UL>

<P><STRONG><a name="[101]"></a>Char_to_Int</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bluetooth.o(i.Char_to_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Char_to_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Recv_Data_Process
</UL>

<P><STRONG><a name="[100]"></a>Char_to_Short</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bluetooth.o(i.Char_to_Short))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Char_to_Short
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Recv_Data_Process
</UL>

<P><STRONG><a name="[f4]"></a>Coordinate_Transform</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dog.o(i.Coordinate_Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Coordinate_Transform &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away_Posctrl
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Stance_Pos
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_enter
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backflip_enter
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_Pos
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Pos
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_run
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stand_Up
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Squat_Down
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_One_Leg
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_All_Leg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Stance
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_enter
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away
</UL>

<P><STRONG><a name="[1bd]"></a>Cross_leg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, action.o(i.Cross_leg))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crossleg_run
</UL>

<P><STRONG><a name="[3f]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.DMA1_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA1_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.DMA1_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA1_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.DMA1_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.DMA1_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.DMA1_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA1_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>DWT_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, delay_dwt.o(i.DWT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Time_Points
</UL>

<P><STRONG><a name="[31]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>Delay_us</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, delay_dwt.o(i.Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Delay_us &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_waiting
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>DogFSM</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, fsm.o(i.DogFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DogFSM
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[178]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART8_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10b]"></a>Euler_Update</STRONG> (Thumb, 172 bytes, Stack size 4 bytes, imu.o(i.Euler_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Euler_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_imu_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away_Posctrl
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_enter
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backflip_enter
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stand_Up
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Squat_Down
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_enter
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away
</UL>

<P><STRONG><a name="[fb]"></a>Foot_Convert_To_Motor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, dog.o(i.Foot_Convert_To_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Foot_Convert_To_Motor &rArr; Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Inversion
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joint_Convert_To_Motor
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Stance_Pos
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_Pos
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Pos
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_All_Leg
</UL>

<P><STRONG><a name="[10f]"></a>Frontflip_s</STRONG> (Thumb, 4894 bytes, Stack size 104 bytes, backflip.o(i.Frontflip_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Frontflip_s &rArr; Bezier &rArr; VMC_Jacobi_Matrix &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_One_Leg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Single_Pitch_State
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backflip_run
</UL>

<P><STRONG><a name="[110]"></a>GamePad_Control_Obs</STRONG> (Thumb, 1604 bytes, Stack size 32 bytes, obstacle_course.o(i.GamePad_Control_Obs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GamePad_Control_Obs &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNowDogState
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Dog_Pitch_State
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Ctrl_State
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeDogState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextDogState
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Walk_Dire
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamepad_Ctl
</UL>

<P><STRONG><a name="[ca]"></a>Gamepad_Ctl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, freertos.o(i.Gamepad_Ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Gamepad_Ctl &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GamePad_Control_Obs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>Generate_Time_Points</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, delay_dwt.o(i.Generate_Time_Points))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Generate_Time_Points &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
</UL>

<P><STRONG><a name="[1c9]"></a>GetDogWhetherChangeAble</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsm.o(i.GetDogWhetherChangeAble))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>GetNextDogState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsm.o(i.GetNextDogState))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GamePad_Control_Obs
</UL>

<P><STRONG><a name="[116]"></a>GetNowDogState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsm.o(i.GetNowDogState))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_race
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GamePad_Control_Obs
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fun
</UL>

<P><STRONG><a name="[11c]"></a>GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delay_dwt.o(i.GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetTick &rArr; Generate_Time_Points &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Time_Points
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_run
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_enter
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backflip_run
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backflip_enter
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stand_run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stand_enter
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squat_run
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squat_enter
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_run
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_enter
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crossleg_run
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crossleg_enter
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_run
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_enter
</UL>

<P><STRONG><a name="[11f]"></a>Get_Now_Ctrl_State</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pos_ctrl.o(i.Get_Now_Ctrl_State))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_run
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_enter
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backflip_run
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stand_Up
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Squat_Down
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_All_Leg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_run
</UL>

<P><STRONG><a name="[f1]"></a>Get_Now_Pos_Spd</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, dog.o(i.Get_Now_Pos_Spd))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Get_Now_Pos_Spd &rArr; Kinematic_Solution &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Ctrl_State
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Convert_To_Joint
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Solution
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Inversion_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leg_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away_Posctrl
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Stance_Pos
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_enter
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backflip_enter
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frontflip_s
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backflip_s
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_Pos
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Pos
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_run
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stand_Up
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Squat_Down
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_One_Leg
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_All_Leg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Stance
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_enter
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away
</UL>

<P><STRONG><a name="[121]"></a>HAL_DMA_Abort</STRONG> (Thumb, 1236 bytes, Stack size 24 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 906 bytes, Stack size 16 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[165]"></a>HAL_DMA_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[106]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 2798 bytes, Stack size 40 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>HAL_DMA_Init</STRONG> (Thumb, 1304 bytes, Stack size 24 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[128]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 980 bytes, Stack size 24 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[179]"></a>HAL_GPIO_Init</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[188]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[122]"></a>HAL_GetTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, delay_dwt.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[153]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[12a]"></a>HAL_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32h7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>HAL_InitTick</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, stm32h7xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12f]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[12e]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[12b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[136]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(i.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[137]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 536 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 536 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[139]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 3432 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[13c]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 774 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[130]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[138]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[13d]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[131]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[109]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 524 bytes, Stack size 20 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Time_Points
</UL>

<P><STRONG><a name="[13e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2130 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[14d]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[18a]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 174 bytes, Stack size 12 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[140]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[133]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Start
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Start
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Start
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[142]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[148]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; usart_reset &rArr; MX_UART8_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; usart_reset &rArr; MX_UART8_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_tc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Update
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DogFSM
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A1_All_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[193]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[154]"></a>HAL_UARTEx_EnableFifoMode</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_EnableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UARTEx_EnableFifoMode &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART8_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_UARTEx_ReceiveToIdle_DMA</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_ReceiveToIdle_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Restart_IT
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Recv_Start
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_USART_Start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Restart_IT
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Recv_Start
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart8_start_recv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart7_start_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_start_recv
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_start_recv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_start_recv
</UL>

<P><STRONG><a name="[157]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 1224 bytes, Stack size 16 bytes, my_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_UARTEx_RxEventCallback &rArr; Vision_Restart_IT &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_data_process
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Restart_IT
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_USART_Start
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Rcv_Prcs
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Restart_IT
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart8_start_recv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart7_start_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_start_recv
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_start_recv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_start_recv
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[163]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART8_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[164]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART8_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[170]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[168]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, my_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_UART_ErrorCallback &rArr; usart6_start_recv &rArr; SB_USART_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart8_start_recv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart7_start_recv
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_start_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_start_recv
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_start_recv
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_start_recv
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_start_recv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_start_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1172 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; usart6_start_recv &rArr; SB_USART_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>HAL_UART_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART8_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[173]"></a>HAL_UART_MspInit</STRONG> (Thumb, 1900 bytes, Stack size 232 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[e9]"></a>HAL_UART_Transmit</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A1_Motor_Send_Data
</UL>

<P><STRONG><a name="[17b]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Send_To_Show32
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[2c]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>Joint_Convert_To_Motor</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, dog.o(i.Joint_Convert_To_Motor))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foot_Convert_To_Motor
</UL>

<P><STRONG><a name="[17c]"></a>Judge_Keep_State</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, action.o(i.Judge_Keep_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Judge_Keep_State
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Diff_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_run
</UL>

<P><STRONG><a name="[17e]"></a>Jump_s</STRONG> (Thumb, 3364 bytes, Stack size 80 bytes, jump.o(i.Jump_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Jump_s &rArr; line &rArr; VMC_Jacobi_Matrix &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_One_Leg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_run
</UL>

<P><STRONG><a name="[17f]"></a>Jump_s_pos</STRONG> (Thumb, 2112 bytes, Stack size 64 bytes, pos_ctrl.o(i.Jump_s_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Jump_s_pos &rArr; line_Pos &rArr; Foot_Convert_To_Motor &rArr; Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_Pos
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_All_Motor_Param
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_One_Leg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_run
</UL>

<P><STRONG><a name="[182]"></a>Keep_All_Leg</STRONG> (Thumb, 436 bytes, Stack size 104 bytes, action.o(i.Keep_All_Leg))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Keep_All_Leg &rArr; Foot_Convert_To_Motor &rArr; Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Ctrl_State
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMC_Jacobi_Matrix
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Target_Torque
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Target_Pos
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PD_Control
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foot_Convert_To_Motor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squat_run
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_run
</UL>

<P><STRONG><a name="[f2]"></a>Keep_One_Leg</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, action.o(i.Keep_One_Leg))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Keep_One_Leg &rArr; VMC_Jacobi_Matrix &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMC_Jacobi_Matrix
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Target_Torque
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PD_Control
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump_s_pos
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump_s
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frontflip_s
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backflip_s
</UL>

<P><STRONG><a name="[10d]"></a>Kinematic_Inversion</STRONG> (Thumb, 464 bytes, Stack size 64 bytes, dog.o(i.Kinematic_Inversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Inversion_Update
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foot_Convert_To_Motor
</UL>

<P><STRONG><a name="[120]"></a>Kinematic_Inversion_Update</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, dog.o(i.Kinematic_Inversion_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Inversion
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
</UL>

<P><STRONG><a name="[11e]"></a>Kinematic_Solution</STRONG> (Thumb, 574 bytes, Stack size 80 bytes, dog.o(i.Kinematic_Solution))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Kinematic_Solution &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
</UL>

<P><STRONG><a name="[1c8]"></a>Leg_Initpos_Reset</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, dog.o(i.Leg_Initpos_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>MX_DMA_Init</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 78 bytes, Stack size 88 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>MX_GPIO_Init</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[189]"></a>MX_TIM2_Init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>MX_TIM3_Init</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18c]"></a>MX_TIM4_Init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tim.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>MX_TIM5_Init</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tim.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18e]"></a>MX_UART4_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usart.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18f]"></a>MX_UART5_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usart.o(i.MX_UART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = MX_UART5_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>MX_UART7_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usart.o(i.MX_UART7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = MX_UART7_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[191]"></a>MX_UART8_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usart.o(i.MX_UART8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = MX_UART8_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[194]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[196]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, usart.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c5]"></a>MotorInit</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, a1_motor.o(i.MotorInit))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>Motor_Convert_To_Joint</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, dog.o(i.Motor_Convert_To_Joint))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
</UL>

<P><STRONG><a name="[2b]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>PD_Control</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, dog.o(i.PD_Control))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_One_Leg
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_All_Leg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Stance
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier
</UL>

<P><STRONG><a name="[1b0]"></a>Pitch_Pos_Offest</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, walk.o(i.Pitch_Pos_Offest))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away_Posctrl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away
</UL>

<P><STRONG><a name="[15c]"></a>SBUS_Rcv_Prcs</STRONG> (Thumb, 238 bytes, Stack size 0 bytes, sbus.o(i.SBUS_Rcv_Prcs))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[15d]"></a>SB_USART_Start</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, sbus.o(i.SB_USART_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SB_USART_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_start_recv
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[1c7]"></a>SetAllMotorMode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, a1_motor.o(i.SetAllMotorMode))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>SetDogChangeAble</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsm.o(i.SetDogChangeAble))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_race
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GamePad_Control_Obs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spd_Race_Ctl
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away_Posctrl
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_run
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_enter
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backflip_run
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backflip_enter
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stand_enter
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squat_run
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squat_enter
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_run
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_enter
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crossleg_enter
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stand_Up
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Squat_Down
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stage_Judge
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_run
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_enter
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away
</UL>

<P><STRONG><a name="[180]"></a>Set_All_Motor_Param</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, a1_motor.o(i.Set_All_Motor_Param))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump_s_pos
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_run
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_enter
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stand_enter
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squat_enter
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_enter
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_enter
</UL>

<P><STRONG><a name="[fc]"></a>Set_Motor_Target_Pos</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, dog.o(i.Set_Motor_Target_Pos))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Stance_Pos
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_Pos
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Pos
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_All_Leg
</UL>

<P><STRONG><a name="[f7]"></a>Set_Motor_Target_Torque</STRONG> (Thumb, 356 bytes, Stack size 0 bytes, dog.o(i.Set_Motor_Target_Torque))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_One_Leg
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_All_Leg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Stance
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier
</UL>

<P><STRONG><a name="[1e6]"></a>Set_Target_Yaw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, walk.o(i.Set_Target_Yaw))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_race
</UL>

<P><STRONG><a name="[19c]"></a>Set_Turning_Kp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, walk.o(i.Set_Turning_Kp))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stage_Judge
</UL>

<P><STRONG><a name="[117]"></a>Set_Walk_Dire</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, walk.o(i.Set_Walk_Dire))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_race
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GamePad_Control_Obs
</UL>

<P><STRONG><a name="[19b]"></a>Set_Walk_Length</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, walk.o(i.Set_Walk_Length))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stage_Judge
</UL>

<P><STRONG><a name="[c9]"></a>Spd_Race_Ctl</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, freertos.o(i.Spd_Race_Ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Spd_Race_Ctl &rArr; start_race &rArr; Stage_Judge &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_race
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Dog_Pitch_State
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Ctrl_State
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeDogState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>Squat_Down</STRONG> (Thumb, 576 bytes, Stack size 32 bytes, action.o(i.Squat_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Squat_Down &rArr; line_Pos &rArr; Foot_Convert_To_Motor &rArr; Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Update
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_Pos
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Ctrl_State
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squat_run
</UL>

<P><STRONG><a name="[19a]"></a>Stage_Judge</STRONG> (Thumb, 1506 bytes, Stack size 8 bytes, speed_race.o(i.Stage_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Stage_Judge &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeDogState
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Walk_Length
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Turning_Kp
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_race
</UL>

<P><STRONG><a name="[19d]"></a>Stand_Up</STRONG> (Thumb, 688 bytes, Stack size 40 bytes, action.o(i.Stand_Up))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Stand_Up &rArr; Bezier_Pos &rArr; Foot_Convert_To_Motor &rArr; Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Update
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Pos
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Ctrl_State
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stand_run
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_run
</UL>

<P><STRONG><a name="[33]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19f]"></a>SystemClock_Config</STRONG> (Thumb, 198 bytes, Stack size 120 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>SystemInit</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, system_stm32h7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>TIM17_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = TIM17_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; usart_reset &rArr; MX_UART8_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; usart_reset &rArr; MX_UART8_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a0]"></a>TIM2_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(i.TIM2_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>TIM3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; usart_reset &rArr; MX_UART8_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a1]"></a>TIM3_Start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(i.TIM3_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>TIM4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; usart_reset &rArr; MX_UART8_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a2]"></a>TIM4_Start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(i.TIM4_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>TIM5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; usart_reset &rArr; MX_UART8_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a3]"></a>TIM5_Start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(i.TIM5_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM5_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[143]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32h7xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1e5]"></a>Transverse_Correction</STRONG> (Thumb, 292 bytes, Stack size 0 bytes, speed_race.o(i.Transverse_Correction))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_race
</UL>

<P><STRONG><a name="[67]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; usart6_start_recv &rArr; SB_USART_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>UART5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = UART5_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; usart6_start_recv &rArr; SB_USART_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>UART7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = UART7_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; usart6_start_recv &rArr; SB_USART_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>UART8_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.UART8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = UART8_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; usart6_start_recv &rArr; SB_USART_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[175]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[176]"></a>UART_CheckIdleState</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[174]"></a>UART_SetConfig</STRONG> (Thumb, 1402 bytes, Stack size 72 bytes, stm32h7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[156]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>

<P><STRONG><a name="[17a]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[59]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; usart6_start_recv &rArr; SB_USART_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; usart6_start_recv &rArr; SB_USART_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; usart6_start_recv &rArr; SB_USART_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>USART6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USART6_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; usart6_start_recv &rArr; SB_USART_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1ab]"></a>Usart_Send_To_Show32</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ano_tc.o(i.Usart_Send_To_Show32))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Usart_Send_To_Show32 &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_tc
</UL>

<P><STRONG><a name="[f6]"></a>VMC_Jacobi_Matrix</STRONG> (Thumb, 648 bytes, Stack size 96 bytes, dog.o(i.VMC_Jacobi_Matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = VMC_Jacobi_Matrix &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_One_Leg
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_All_Leg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Stance
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier
</UL>

<P><STRONG><a name="[1ac]"></a>Vision_Recv_Data_Process</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, vision.o(i.Vision_Recv_Data_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Vision_Recv_Data_Process &rArr; Char_to_Float
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char_to_Float
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Restart_IT
</UL>

<P><STRONG><a name="[1ad]"></a>Vision_Recv_Start</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, vision.o(i.Vision_Recv_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Vision_Recv_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_start_recv
</UL>

<P><STRONG><a name="[15b]"></a>Vision_Restart_IT</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, vision.o(i.Vision_Restart_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Vision_Restart_IT &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Recv_Data_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[1ae]"></a>Walk_Away</STRONG> (Thumb, 790 bytes, Stack size 32 bytes, walk.o(i.Walk_Away))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Walk_Away &rArr; gait &rArr; Bezier_Stance &rArr; VMC_Jacobi_Matrix &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Update
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_Pos_Crol
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitch_Pos_Offest
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gait
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_run
</UL>

<P><STRONG><a name="[1b2]"></a>Walk_Away_Posctrl</STRONG> (Thumb, 764 bytes, Stack size 32 bytes, pos_ctrl.o(i.Walk_Away_Posctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Walk_Away_Posctrl &rArr; gait_posctrl &rArr; Bezier_Stance_Pos &rArr; Foot_Convert_To_Motor &rArr; Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Update
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_Pos_Crol
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pitch_Pos_Offest
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gait_posctrl
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_run
</UL>

<P><STRONG><a name="[1af]"></a>Yaw_Pos_Crol</STRONG> (Thumb, 444 bytes, Stack size 0 bytes, walk.o(i.Yaw_Pos_Crol))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away_Posctrl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away
</UL>

<P><STRONG><a name="[1b4]"></a>Yaw_Reset</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, imu.o(i.Yaw_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Yaw_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_imu_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_race
</UL>

<P><STRONG><a name="[1b8]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[183]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Inversion_Update
</UL>

<P><STRONG><a name="[119]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GamePad_Control_Obs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Inversion_Update
</UL>

<P><STRONG><a name="[ed]"></a>__hardfp_cosf</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump_s_pos
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump_s
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frontflip_s
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backflip_s
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMC_Jacobi_Matrix
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Solution
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Inversion_Update
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Inversion
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
</UL>

<P><STRONG><a name="[f0]"></a>__hardfp_fmodf</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, fmodf.o(i.__hardfp_fmodf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away_Posctrl
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frontflip_s
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backflip_s
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away
</UL>

<P><STRONG><a name="[ec]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump_s_pos
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump_s
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frontflip_s
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backflip_s
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMC_Jacobi_Matrix
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Solution
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Inversion_Update
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Inversion
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
</UL>

<P><STRONG><a name="[118]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GamePad_Control_Obs
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMC_Jacobi_Matrix
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Solution
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Inversion_Update
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic_Inversion
</UL>

<P><STRONG><a name="[1b6]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[1ba]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[1b7]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[1b9]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[1bb]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[151]"></a>ano_tc</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, dog.o(i.ano_tc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ano_tc &rArr; Usart_Send_To_Show32 &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Send_To_Show32
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[15]"></a>backflip_enter</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, backflip.o(i.backflip_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = backflip_enter &rArr; Get_Now_Pos_Spd &rArr; Kinematic_Solution &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Dog_Pitch_State
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Update
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>backflip_exit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, backflip.o(i.backflip_exit))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>backflip_run</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, backflip.o(i.backflip_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = backflip_run &rArr; Frontflip_s &rArr; Bezier &rArr; VMC_Jacobi_Matrix &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Ctrl_State
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frontflip_s
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backflip_s
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Ctrl_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[1cb]"></a>crc32_core</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, a1_motor.o(i.crc32_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc32_core
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_data
</UL>

<P><STRONG><a name="[18]"></a>crossleg_enter</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, action.o(i.crossleg_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = crossleg_enter &rArr; GetTick &rArr; Generate_Time_Points &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Dog_Pitch_State
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Ctrl_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>crossleg_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.crossleg_exit))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>crossleg_run</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, action.o(i.crossleg_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = crossleg_run &rArr; GetTick &rArr; Generate_Time_Points &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cross_leg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[cb]"></a>debug_fun</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, freertos.o(i.debug_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = debug_fun &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNowDogState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeDogState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[1b1]"></a>gait</STRONG> (Thumb, 1190 bytes, Stack size 32 bytes, walk.o(i.gait))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = gait &rArr; Bezier_Stance &rArr; VMC_Jacobi_Matrix &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Stance
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away
</UL>

<P><STRONG><a name="[1b3]"></a>gait_posctrl</STRONG> (Thumb, 1156 bytes, Stack size 32 bytes, pos_ctrl.o(i.gait_posctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gait_posctrl &rArr; Bezier_Stance_Pos &rArr; Foot_Convert_To_Motor &rArr; Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Stance_Pos
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away_Posctrl
</UL>

<P><STRONG><a name="[197]"></a>get_float_from_4u8</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, my_uart.o(i.get_float_from_4u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_float_from_4u8
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DataProcess
</UL>

<P><STRONG><a name="[10c]"></a>get_imu_angle</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, imu.o(i.get_imu_angle))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Update
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_Reset
</UL>

<P><STRONG><a name="[159]"></a>imu_data_process</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, imu.o(i.imu_data_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = imu_data_process &rArr; crc16_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_update
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABS
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[12]"></a>jump_enter</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, jump.o(i.jump_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = jump_enter &rArr; Get_Now_Pos_Spd &rArr; Kinematic_Solution &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Dog_Pitch_State
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Update
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeJumpType
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_All_Motor_Param
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Ctrl_State
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>jump_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.jump_exit))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>jump_hurdles_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.jump_hurdles_enter))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>jump_hurdles_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.jump_hurdles_exit))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>jump_hurdles_run</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.jump_hurdles_run))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>jump_run</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, jump.o(i.jump_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = jump_run &rArr; Jump_s_pos &rArr; line_Pos &rArr; Foot_Convert_To_Motor &rArr; Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Ctrl_State
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump_s_pos
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump_s
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_All_Motor_Param
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Ctrl_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>keep_enter</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, action.o(i.keep_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = keep_enter &rArr; GetTick &rArr; Generate_Time_Points &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Dog_Pitch_State
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_All_Motor_Param
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>keep_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.keep_exit))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>keep_run</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, action.o(i.keep_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = keep_run &rArr; Stand_Up &rArr; Bezier_Pos &rArr; Foot_Convert_To_Motor &rArr; Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stand_Up
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_All_Leg
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Keep_State
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[1c2]"></a>leg_init</STRONG> (Thumb, 854 bytes, Stack size 16 bytes, dog.o(i.leg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = leg_init &rArr; Get_Now_Pos_Spd &rArr; Kinematic_Solution &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>line</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, dog.o(i.line))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = line &rArr; VMC_Jacobi_Matrix &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_Generator
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMC_Jacobi_Matrix
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Target_Torque
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PD_Control
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump_s
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frontflip_s
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backflip_s
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stand_Up
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Squat_Down
</UL>

<P><STRONG><a name="[1c3]"></a>line_Generator</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, dog.o(i.line_Generator))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = line_Generator
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_Pos
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line
</UL>

<P><STRONG><a name="[181]"></a>line_Pos</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, pos_ctrl.o(i.line_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = line_Pos &rArr; Foot_Convert_To_Motor &rArr; Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_Generator
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Target_Pos
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foot_Convert_To_Motor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump_s_pos
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Squat_Down
</UL>

<P><STRONG><a name="[1b]"></a>line_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.line_enter))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>line_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.line_exit))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>line_run</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.line_run))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[d7]"></a>main</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = main &rArr; MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_start_recv
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_waiting
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leg_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Start
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Start
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Start
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Start
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAllMotorMode
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART8_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leg_Initpos_Reset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDogWhetherChangeAble
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Ctrl_State
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeDogState
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e8]"></a>modify_data</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, a1_motor.o(i.modify_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = modify_data &rArr; crc32_core
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_core
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A1_Motor_Send_Data
</UL>

<P><STRONG><a name="[1c6]"></a>motor_waiting</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, a1_motor.o(i.motor_waiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = motor_waiting &rArr; Delay_us &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>osDelay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fun
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spd_Race_Ctl
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamepad_Ctl
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stage_Judge
</UL>

<P><STRONG><a name="[1ca]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>osThreadCreate</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[1e0]"></a>pvPortMalloc</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1de]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1b5]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[9]"></a>squat_enter</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, action.o(i.squat_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = squat_enter &rArr; GetTick &rArr; Generate_Time_Points &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Dog_Pitch_State
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_All_Motor_Param
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>squat_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.squat_exit))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>squat_run</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, action.o(i.squat_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = squat_run &rArr; Keep_All_Leg &rArr; Foot_Convert_To_Motor &rArr; Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Ctrl_State
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Squat_Down
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keep_All_Leg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>stand_enter</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, action.o(i.stand_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = stand_enter &rArr; GetTick &rArr; Generate_Time_Points &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Dog_Pitch_State
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Ctrl_State
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_All_Motor_Param
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>stand_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, action.o(i.stand_exit))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>stand_run</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, action.o(i.stand_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = stand_run &rArr; Stand_Up &rArr; Bezier_Pos &rArr; Foot_Convert_To_Motor &rArr; Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stand_Up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>start_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, action.o(i.start_enter))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>start_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, action.o(i.start_exit))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[198]"></a>start_race</STRONG> (Thumb, 504 bytes, Stack size 8 bytes, speed_race.o(i.start_race))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = start_race &rArr; Stage_Judge &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNowDogState
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Ctrl_State
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeDogState
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transverse_Correction
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stage_Judge
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_Reset
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Walk_Dire
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Target_Yaw
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spd_Race_Ctl
</UL>

<P><STRONG><a name="[4]"></a>start_run</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, action.o(i.start_run))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>test1_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.test1_enter))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>test1_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.test1_exit))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>test1_run</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.test1_run))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>test2_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.test2_enter))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>test2_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.test2_exit))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>test2_run</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.test2_run))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>test3_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.test3_enter))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>test3_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.test3_exit))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>test3_run</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.test3_run))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[15a]"></a>usart1_start_recv</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, my_uart.o(i.usart1_start_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usart1_start_recv &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_start_recv
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[169]"></a>usart2_start_recv</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, my_uart.o(i.usart2_start_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = usart2_start_recv &rArr; Bluetooth_Recv_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Recv_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_start_recv
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[16a]"></a>usart3_start_recv</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, my_uart.o(i.usart3_start_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = usart3_start_recv &rArr; Vision_Recv_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Recv_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_start_recv
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[15e]"></a>usart4_start_recv</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, my_uart.o(i.usart4_start_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usart4_start_recv &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_start_recv
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[161]"></a>usart5_start_recv</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, my_uart.o(i.usart5_start_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usart5_start_recv &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_start_recv
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[16b]"></a>usart6_start_recv</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, my_uart.o(i.usart6_start_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = usart6_start_recv &rArr; SB_USART_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_USART_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_start_recv
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[162]"></a>usart7_start_recv</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, my_uart.o(i.usart7_start_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usart7_start_recv &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_start_recv
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[160]"></a>usart8_start_recv</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, my_uart.o(i.usart8_start_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usart8_start_recv &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_start_recv
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[152]"></a>usart_reset</STRONG> (Thumb, 480 bytes, Stack size 8 bytes, my_uart.o(i.usart_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = usart_reset &rArr; MX_UART8_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART8_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart8_start_recv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart7_start_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_start_recv
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_start_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1c4]"></a>usart_start_recv</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, my_uart.o(i.usart_start_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usart_start_recv &rArr; usart6_start_recv &rArr; SB_USART_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart8_start_recv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart7_start_recv
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_start_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_start_recv
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_start_recv
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_start_recv
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_start_recv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_start_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d2]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1e7]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, freertos.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1df]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[1dd]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1d4]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1d3]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1d6]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1d8]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1db]"></a>vPortFree</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[1e9]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1cc]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[1cd]"></a>vTaskStartScheduler</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[1e1]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[dd]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[f]"></a>walk_enter</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, walk.o(i.walk_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = walk_enter &rArr; Get_Now_Pos_Spd &rArr; Kinematic_Solution &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Update
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_All_Motor_Param
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Pos_Spd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinate_Transform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>walk_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, walk.o(i.walk_exit))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>walk_run</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, walk.o(i.walk_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = walk_run &rArr; Walk_Away_Posctrl &rArr; gait_posctrl &rArr; Bezier_Stance_Pos &rArr; Foot_Convert_To_Motor &rArr; Kinematic_Inversion &rArr; Kinematic_Inversion_Update &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDogChangeAble
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away_Posctrl
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Now_Ctrl_State
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Walk_Away
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.data)
</UL>
<P><STRONG><a name="[1e8]"></a>xPortStartScheduler</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1d0]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1cf]"></a>xTaskCreateStatic</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[19e]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1e4]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[1ed]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
</UL>

<P><STRONG><a name="[d1]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[225]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[226]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1bc]"></a>_frem</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, frem_clz.o(x$fpl$frem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[134]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[135]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[13a]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[13b]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[125]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[126]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, stm32h7xx_hal_dma.o(i.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[127]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[124]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[129]"></a>DMA_SetConfig</STRONG> (Thumb, 614 bytes, Stack size 20 bytes, stm32h7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[145]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[144]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32h7xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[146]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32h7xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[c1]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback &rArr; usart6_start_recv &rArr; SB_USART_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[c4]"></a>UART_DMAError</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = UART_DMAError &rArr; HAL_UART_ErrorCallback &rArr; usart6_start_recv &rArr; SB_USART_Start &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
<LI> stm32h7xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[c5]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UARTEx_RxEventCallback &rArr; Vision_Restart_IT &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[c6]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = UART_DMARxHalfCplt &rArr; HAL_UARTEx_RxEventCallback &rArr; Vision_Restart_IT &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[c2]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[c3]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[167]"></a>UART_EndRxTransfer</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[166]"></a>UART_EndTxTransfer</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[155]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(i.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
</UL>

<P><STRONG><a name="[1d1]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[1d5]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1d9]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1da]"></a>prvDeleteTCB</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[c8]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1dc]"></a>prvInitialiseNewTask</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1d7]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1ec]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1ce]"></a>makeFreeRtosPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1e2]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1e3]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[c7]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[15f]"></a>Motor_DataProcess</STRONG> (Thumb, 858 bytes, Stack size 16 bytes, my_uart.o(i.Motor_DataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_DataProcess &rArr; get_float_from_4u8
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_float_from_4u8
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[1c0]"></a>ABS</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, imu.o(i.ABS))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_data_process
</UL>

<P><STRONG><a name="[1be]"></a>crc16_update</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, imu.o(i.crc16_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc16_update
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_data_process
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
